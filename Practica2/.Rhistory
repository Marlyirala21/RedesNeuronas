setwd("C:/Users/marly/OneDrive/Escritorio/cuartoo/primer cuatri/RedesNeuronas/Practica2")
library(RSNNS)
graficaError <- function(iterativeErrors){
plot(1:nrow(iterativeErrors),iterativeErrors[,1], type="l", main="Evolucion del error",
ylab="MSE",xlab="Ciclos",
ylim=c(min(iterativeErrors),max(iterativeErrors)))
lines(1:nrow(iterativeErrors),iterativeErrors[,2], col="red")
}
## funcion que calcula el error cuadratico medio
MSE <- function(pred,obs) {sum((pred-obs)^2)/length(obs)}
#CARGA DE DATOS
# se supone que los ficheros tienen encabezados
# si no los tienen, cambiar header a F
trainSet <- read.csv("train.csv",dec=".",sep=",",header = T)
validSet <- read.csv( "validate.csv",dec=".",sep=",",header = T)
testSet  <- read.csv("test.csv",dec=".",sep=",",header = T)
salida <- ncol (trainSet)   #num de la columna de salida
#SELECCION DE LOS PARAMETROS
topologia        <- c(60) #PARAMETRO DEL TIPO c(A,B,C,...,X) A SIENDO LAS NEURONAS EN LA CAPA OCULTA 1, B LA CAPA 2 ...
razonAprendizaje <- 0.2 #NUMERO REAL ENTRE 0 y 1
ciclosMaximos    <- 2000 #NUMERO ENTERO MAYOR QUE 0
#EJECUCION DEL APRENDIZAJE Y GENERACION DEL MODELO
set.seed(1)
model <- mlp(x= trainSet[,-salida],
y= trainSet[, salida],
inputsTest=  validSet[,-salida],
targetsTest= validSet[, salida],
size= topologia,
maxit=ciclosMaximos,
learnFuncParams=c(razonAprendizaje),
shufflePatterns = F
)
#GRAFICO DE LA EVOLUCION DEL ERROR
#plotIterativeError(model)
# lo desactivamos porque a veces tiene problemas con las escalas.
# establece el mï¿½nimo y el mï¿½ximo en funciï¿½n del error de entrenamiento y a veces
# no muestra el de validaciï¿½n si es mï¿½s pequeï¿½o.
#Usamos graficaError() pero antes hay que calcular iterativeErrors que contiene
#los errores MSE por ciclo de train y valid
# DATAFRAME CON LOS ERRORES POR CICLo: de entrenamiento y de validacion
iterativeErrors <- data.frame(MSETrain= (model$IterativeFitError/ nrow(trainSet)),
MSEValid= (model$IterativeTestError/nrow(validSet)))
graficaError(iterativeErrors)
View(graficaError)
View(MSE)
View(MSE)
print(MSE)
view(outputs)
print(outputs)
View(iterativeErrors)
View(trainSet)
View(testSet)
View(iterativeErrors)
View(validSet)
View(iterativeErrors)
source("C:/Users/marly/OneDrive/Escritorio/cuartoo/primer cuatri/RedesNeuronas/Practica2/Script.r")
# DATAFRAME CON LOS ERRORES POR CICLo: de entrenamiento y de validacion
iterativeErrors <- data.frame(MSETrain= (model$IterativeFitError/ nrow(trainSet)),
MSEValid= (model$IterativeTestError/nrow(validSet)))
View(prediccionesTrain)
